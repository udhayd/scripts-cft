AWSTemplateFormatVersion: 2010-09-09
Description: K8s Cluster Instances Creation

Parameters:
  ImageId:
    Description: "AMI Id"
    Type: String
  STK:
    Description: "Name of stack"
    Type: String
  HOSTZONE:
    Description: "Hosted Zone"
    Type: String


Mappings: 
  MInstanceMap: 
    Instancetype: 
      dev: "t2.small"
      test: "t2.micro"
      uat: "t2.medium"
      prod: "t2.large"
  WInstanceMap: 
    Instancetype: 
      dev: "t2.medium"
      test: "t2.small"
      uat: "t2.large"
      prod: "t2.2xlarge"

Resources:
  Installnode:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Ref: ImageId
      InstanceType: !FindInMap [MInstanceMap, Instancetype, dev]
      SecurityGroupIds:
        - Ref: LBSecurityGroup
      SubnetId:
        Fn::ImportValue: PublicSubnet1ID
      Tags:
        - Key: Name
          Value: !Sub openshift-install-${STK}
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            set -x
            exec >/root/bootstrap.log 2>&1
            cd /root
            hostname openshift-install
            echo openshift-install  >/etc/hostname
            cat >>/root/.bash_profile <<EOF
            alias c=clear
            alias kc=kubectl
            set -o vi
            export PS1=\$(hostname):'\$PWD# '
            EOF
            source /root/.bash_profile
            AZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null)
            export AWS_DEFAULT_REGION=$(echo $AZ| sed 's/.$//g')
            ssh-keygen -t rsa -f /root/.ssh/id_rsa -q -P ""
            cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys
            dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            yum install -y unzip groff
            systemctl enable amazon-ssm-agent && systemctl start amazon-ssm-agent
            systemctl status amazon-ssm-agent
            curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip
            sudo ./aws/install && rm -rf aws* README*
            curl -OL https://github.com/okd-project/okd/releases/download/4.17.0-okd-scos.0/openshift-install-linux-4.17.0-okd-scos.0.tar.gz
            tar -xzvf openshift-install-linux*.tar.gz;mv openshift-install /usr/local/bin/
            USER=$(aws iam list-users --output text|awk '{print $7}')
            CREDS=$(aws iam create-access-key --user-name $USER --output text)
            CREDS1=(echo $CREDS)
            echo "export AWS_REGION=$AWS_DEFAULT_REGION" >>/root/.bash_profile
            echo "export AWS_ACCESS_KEY_ID=$(echo $CREDS|awk '{print $2}')" >>/root.bash_profile
            echo "export AWS_SECRET_ACCESS_KEY=$(echo $CREDS|awk '{print $4}')" >>/root/.bash_profile
            echo "********END TASK******************"
            

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: "${AWS::StackName}-LB"
      GroupDescription:
        Fn::Sub: "${AWS::StackName} LB"
      VpcId:
        Fn::ImportValue: MyVPCID
      SecurityGroupIngress:
      - IpProtocol: TCP
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        Description: "To Access Application in K8s cluster"
      - IpProtocol: TCP
        FromPort: 6443
        ToPort: 6443  
        CidrIp: 0.0.0.0/0
        Description: "To Access Kubeapi Server"

  HostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: 'My hosted zone for okd'
      Name: !Sub "${HOSTZONE}"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-K8S"
      Roles:
        - Ref: InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "IAM role to connect to EC2 Instance"
      RoleName: !Sub "${AWS::StackName}-K8S"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AdministratorAccess
